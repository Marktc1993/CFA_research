{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.metrics import mean_squared_error, r2_score,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data = pd.read_excel(\"truck_units_GDP_pcar.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import sklearn.linear_model as skllm\n",
    "# col_names = {1:}\n",
    "# data[\"US GDP\"][:]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Getting vlaues from an object with multi-axes selection uses the following notation.\n",
    "\n",
    "dataframe: df.loc[row_indexer, column_indexer]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:8: FutureWarning: reshape is deprecated and will raise in a subsequent release. Please use .values.reshape(...) instead\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:9: FutureWarning: reshape is deprecated and will raise in a subsequent release. Please use .values.reshape(...) instead\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([  3.89883913e-08])"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x133dafb4128>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lm = skllm.LinearRegression()\n",
    "# With a one feature model I need to convert the array shape\n",
    "# data.loc[:,3:]\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "x_train = data.loc[0:8,\"US GDP\"]\n",
    "y_train = data.loc[0:8,\"Total Truck Market Units US/Canada Heavy Duty\"]\n",
    "lm.fit(x_train.reshape(-1,1), y_train)\n",
    "pred = lm.predict(data.loc[9,[\"US GDP\"]].reshape(1, -1))\n",
    "plt.scatter(x_train, y_train)\n",
    "plt.plot(data[\"US GDP\"])\n",
    "lm.coef_\n",
    "# (data[\"log US GDP\"], np.log(data[\"Total Truck Market Units US/Canada Heavy Duty\"]))\n",
    "# plt.plot(lm.fit(data[\"US GDP\"].reshape(-1,1), data[\"Total Truck Market Units US/Canada Heavy Duty\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is too high, we may need to take the logarithm to be sure that the rate of change is measured and not the units. The log of this is equivalent to log_e(x)  = e to what power gives us x? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py:57: FutureWarning: reshape is deprecated and will raise in a subsequent release. Please use .values.reshape(...) instead\n",
      "  return getattr(obj, method)(*args, **kwds)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(10, 2)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# lm.fit(data[\"US GDP\"], data[\"New Trucks Sold (units) Total\\n\"])\n",
    "data[\"US GDP\"] = np.reshape(data[\"US GDP\"],(10,1))\n",
    "data.loc[:,[\"US GDP\",\"New Trucks Sold (units) Total\\n\"]].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>New Trucks Sold (units) US/Canada</th>\n",
       "      <th>New Trucks Sold (units) Europe</th>\n",
       "      <th>New Trucks Sold (units) Mexico/Other</th>\n",
       "      <th>New Trucks Sold (units) Total</th>\n",
       "      <th>Total Truck Market Units US/Canada Heavy Duty</th>\n",
       "      <th>Total Truck Units Market Units US/Canada Heavy Medium</th>\n",
       "      <th>Total Truck Market Units Europe &lt; 16 tons</th>\n",
       "      <th>Total Truck Market Units Europe 6-16 tons</th>\n",
       "      <th>Brazil GDP</th>\n",
       "      <th>Canada GDP</th>\n",
       "      <th>China GDP</th>\n",
       "      <th>Germany GDP</th>\n",
       "      <th>EU GDP</th>\n",
       "      <th>Mexico GDP</th>\n",
       "      <th>US GDP</th>\n",
       "      <th>log US GDP</th>\n",
       "      <th>log China GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2007</td>\n",
       "      <td>53000</td>\n",
       "      <td>60100</td>\n",
       "      <td>20800</td>\n",
       "      <td>133900</td>\n",
       "      <td>175800</td>\n",
       "      <td>85000</td>\n",
       "      <td>340000</td>\n",
       "      <td>55888.888889</td>\n",
       "      <td>1397080000000</td>\n",
       "      <td>1464980000000</td>\n",
       "      <td>3552180000000</td>\n",
       "      <td>3439950000000</td>\n",
       "      <td>17781300000000</td>\n",
       "      <td>1043470000000</td>\n",
       "      <td>14477600000000</td>\n",
       "      <td>30.303624</td>\n",
       "      <td>28.898583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2008</td>\n",
       "      <td>44900</td>\n",
       "      <td>63700</td>\n",
       "      <td>17300</td>\n",
       "      <td>125900</td>\n",
       "      <td>152600</td>\n",
       "      <td>63000</td>\n",
       "      <td>330000</td>\n",
       "      <td>79000.000000</td>\n",
       "      <td>1695820000000</td>\n",
       "      <td>1549130000000</td>\n",
       "      <td>4598210000000</td>\n",
       "      <td>3752370000000</td>\n",
       "      <td>19117800000000</td>\n",
       "      <td>1101280000000</td>\n",
       "      <td>14718600000000</td>\n",
       "      <td>30.320133</td>\n",
       "      <td>29.156688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2009</td>\n",
       "      <td>32700</td>\n",
       "      <td>22200</td>\n",
       "      <td>6100</td>\n",
       "      <td>61000</td>\n",
       "      <td>108000</td>\n",
       "      <td>40000</td>\n",
       "      <td>168000</td>\n",
       "      <td>51000.000000</td>\n",
       "      <td>1667020000000</td>\n",
       "      <td>1371150000000</td>\n",
       "      <td>5109950000000</td>\n",
       "      <td>3418010000000</td>\n",
       "      <td>17080900000000</td>\n",
       "      <td>894949000000</td>\n",
       "      <td>14418700000000</td>\n",
       "      <td>30.299547</td>\n",
       "      <td>29.262211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010</td>\n",
       "      <td>35200</td>\n",
       "      <td>31200</td>\n",
       "      <td>12400</td>\n",
       "      <td>78800</td>\n",
       "      <td>126000</td>\n",
       "      <td>41000</td>\n",
       "      <td>183000</td>\n",
       "      <td>51000.000000</td>\n",
       "      <td>2208870000000</td>\n",
       "      <td>1613460000000</td>\n",
       "      <td>6100620000000</td>\n",
       "      <td>3417090000000</td>\n",
       "      <td>16977900000000</td>\n",
       "      <td>1051130000000</td>\n",
       "      <td>14964400000000</td>\n",
       "      <td>30.336695</td>\n",
       "      <td>29.439412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011</td>\n",
       "      <td>69400</td>\n",
       "      <td>48700</td>\n",
       "      <td>19900</td>\n",
       "      <td>138000</td>\n",
       "      <td>197000</td>\n",
       "      <td>61000</td>\n",
       "      <td>242500</td>\n",
       "      <td>61100.000000</td>\n",
       "      <td>2616200000000</td>\n",
       "      <td>1788650000000</td>\n",
       "      <td>7572550000000</td>\n",
       "      <td>3757700000000</td>\n",
       "      <td>18340500000000</td>\n",
       "      <td>1171190000000</td>\n",
       "      <td>15517900000000</td>\n",
       "      <td>30.373015</td>\n",
       "      <td>29.655551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2012</td>\n",
       "      <td>73100</td>\n",
       "      <td>43500</td>\n",
       "      <td>23800</td>\n",
       "      <td>140400</td>\n",
       "      <td>224900</td>\n",
       "      <td>64600</td>\n",
       "      <td>222000</td>\n",
       "      <td>55500.000000</td>\n",
       "      <td>2465190000000</td>\n",
       "      <td>1824290000000</td>\n",
       "      <td>8560550000000</td>\n",
       "      <td>3543980000000</td>\n",
       "      <td>17271700000000</td>\n",
       "      <td>1186600000000</td>\n",
       "      <td>16155300000000</td>\n",
       "      <td>30.413269</td>\n",
       "      <td>29.778186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2013</td>\n",
       "      <td>68700</td>\n",
       "      <td>48400</td>\n",
       "      <td>20000</td>\n",
       "      <td>137100</td>\n",
       "      <td>212200</td>\n",
       "      <td>65900</td>\n",
       "      <td>240800</td>\n",
       "      <td>57000.000000</td>\n",
       "      <td>2472810000000</td>\n",
       "      <td>1842630000000</td>\n",
       "      <td>9607220000000</td>\n",
       "      <td>3752510000000</td>\n",
       "      <td>18002700000000</td>\n",
       "      <td>1261980000000</td>\n",
       "      <td>16691500000000</td>\n",
       "      <td>30.445921</td>\n",
       "      <td>29.893536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2014</td>\n",
       "      <td>84800</td>\n",
       "      <td>39500</td>\n",
       "      <td>18600</td>\n",
       "      <td>142900</td>\n",
       "      <td>249400</td>\n",
       "      <td>70500</td>\n",
       "      <td>226300</td>\n",
       "      <td>46500.000000</td>\n",
       "      <td>2455990000000</td>\n",
       "      <td>1792880000000</td>\n",
       "      <td>10482400000000</td>\n",
       "      <td>3879280000000</td>\n",
       "      <td>18588200000000</td>\n",
       "      <td>1298400000000</td>\n",
       "      <td>17393100000000</td>\n",
       "      <td>30.487095</td>\n",
       "      <td>29.980719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2015</td>\n",
       "      <td>91300</td>\n",
       "      <td>47400</td>\n",
       "      <td>16000</td>\n",
       "      <td>154700</td>\n",
       "      <td>278400</td>\n",
       "      <td>80200</td>\n",
       "      <td>269100</td>\n",
       "      <td>49000.000000</td>\n",
       "      <td>1803650000000</td>\n",
       "      <td>1552810000000</td>\n",
       "      <td>11064700000000</td>\n",
       "      <td>3363600000000</td>\n",
       "      <td>16334800000000</td>\n",
       "      <td>1151040000000</td>\n",
       "      <td>18036600000000</td>\n",
       "      <td>30.523424</td>\n",
       "      <td>30.034781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2016</td>\n",
       "      <td>71500</td>\n",
       "      <td>53000</td>\n",
       "      <td>16400</td>\n",
       "      <td>140900</td>\n",
       "      <td>215700</td>\n",
       "      <td>85200</td>\n",
       "      <td>302500</td>\n",
       "      <td>52900.000000</td>\n",
       "      <td>1796190000000</td>\n",
       "      <td>1529760000000</td>\n",
       "      <td>11199100000000</td>\n",
       "      <td>3466760000000</td>\n",
       "      <td>16398000000000</td>\n",
       "      <td>1046000000000</td>\n",
       "      <td>18569100000000</td>\n",
       "      <td>30.552520</td>\n",
       "      <td>30.046855</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  New Trucks Sold (units) US/Canada\\n  \\\n",
       "0  2007                                53000   \n",
       "1  2008                                44900   \n",
       "2  2009                                32700   \n",
       "3  2010                                35200   \n",
       "4  2011                                69400   \n",
       "5  2012                                73100   \n",
       "6  2013                                68700   \n",
       "7  2014                                84800   \n",
       "8  2015                                91300   \n",
       "9  2016                                71500   \n",
       "\n",
       "   New Trucks Sold (units) Europe\\n  New Trucks Sold (units) Mexico/Other\\n  \\\n",
       "0                             60100                                   20800   \n",
       "1                             63700                                   17300   \n",
       "2                             22200                                    6100   \n",
       "3                             31200                                   12400   \n",
       "4                             48700                                   19900   \n",
       "5                             43500                                   23800   \n",
       "6                             48400                                   20000   \n",
       "7                             39500                                   18600   \n",
       "8                             47400                                   16000   \n",
       "9                             53000                                   16400   \n",
       "\n",
       "   New Trucks Sold (units) Total\\n  \\\n",
       "0                           133900   \n",
       "1                           125900   \n",
       "2                            61000   \n",
       "3                            78800   \n",
       "4                           138000   \n",
       "5                           140400   \n",
       "6                           137100   \n",
       "7                           142900   \n",
       "8                           154700   \n",
       "9                           140900   \n",
       "\n",
       "   Total Truck Market Units US/Canada Heavy Duty  \\\n",
       "0                                         175800   \n",
       "1                                         152600   \n",
       "2                                         108000   \n",
       "3                                         126000   \n",
       "4                                         197000   \n",
       "5                                         224900   \n",
       "6                                         212200   \n",
       "7                                         249400   \n",
       "8                                         278400   \n",
       "9                                         215700   \n",
       "\n",
       "   Total Truck Units Market Units US/Canada Heavy Medium  \\\n",
       "0                                              85000       \n",
       "1                                              63000       \n",
       "2                                              40000       \n",
       "3                                              41000       \n",
       "4                                              61000       \n",
       "5                                              64600       \n",
       "6                                              65900       \n",
       "7                                              70500       \n",
       "8                                              80200       \n",
       "9                                              85200       \n",
       "\n",
       "   Total Truck Market Units Europe < 16 tons  \\\n",
       "0                                     340000   \n",
       "1                                     330000   \n",
       "2                                     168000   \n",
       "3                                     183000   \n",
       "4                                     242500   \n",
       "5                                     222000   \n",
       "6                                     240800   \n",
       "7                                     226300   \n",
       "8                                     269100   \n",
       "9                                     302500   \n",
       "\n",
       "   Total Truck Market Units Europe 6-16 tons     Brazil GDP     Canada GDP  \\\n",
       "0                               55888.888889  1397080000000  1464980000000   \n",
       "1                               79000.000000  1695820000000  1549130000000   \n",
       "2                               51000.000000  1667020000000  1371150000000   \n",
       "3                               51000.000000  2208870000000  1613460000000   \n",
       "4                               61100.000000  2616200000000  1788650000000   \n",
       "5                               55500.000000  2465190000000  1824290000000   \n",
       "6                               57000.000000  2472810000000  1842630000000   \n",
       "7                               46500.000000  2455990000000  1792880000000   \n",
       "8                               49000.000000  1803650000000  1552810000000   \n",
       "9                               52900.000000  1796190000000  1529760000000   \n",
       "\n",
       "        China GDP    Germany GDP          EU GDP     Mexico GDP  \\\n",
       "0   3552180000000  3439950000000  17781300000000  1043470000000   \n",
       "1   4598210000000  3752370000000  19117800000000  1101280000000   \n",
       "2   5109950000000  3418010000000  17080900000000   894949000000   \n",
       "3   6100620000000  3417090000000  16977900000000  1051130000000   \n",
       "4   7572550000000  3757700000000  18340500000000  1171190000000   \n",
       "5   8560550000000  3543980000000  17271700000000  1186600000000   \n",
       "6   9607220000000  3752510000000  18002700000000  1261980000000   \n",
       "7  10482400000000  3879280000000  18588200000000  1298400000000   \n",
       "8  11064700000000  3363600000000  16334800000000  1151040000000   \n",
       "9  11199100000000  3466760000000  16398000000000  1046000000000   \n",
       "\n",
       "           US GDP  log US GDP  log China GDP  \n",
       "0  14477600000000   30.303624      28.898583  \n",
       "1  14718600000000   30.320133      29.156688  \n",
       "2  14418700000000   30.299547      29.262211  \n",
       "3  14964400000000   30.336695      29.439412  \n",
       "4  15517900000000   30.373015      29.655551  \n",
       "5  16155300000000   30.413269      29.778186  \n",
       "6  16691500000000   30.445921      29.893536  \n",
       "7  17393100000000   30.487095      29.980719  \n",
       "8  18036600000000   30.523424      30.034781  \n",
       "9  18569100000000   30.552520      30.046855  "
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# To index columns in Pandas we need to list \n",
    "data[[\"US GDP\", \"China GDP\"]]\n",
    "def log_column(column):\n",
    "    return np.log(column)\n",
    "data[\"log US GDP\"] = log_column(data[\"US GDP\"])\n",
    "data[\"log China GDP\"] = log_column(data[\"China GDP\"])\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data[\"US GDP\"].shape\n",
    "def reshape_column(column, new_shape):\n",
    "    return np.reshape(column, new_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py:57: FutureWarning: reshape is deprecated and will raise in a subsequent release. Please use .values.reshape(...) instead\n",
      "  return getattr(obj, method)(*args, **kwds)\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "could not broadcast input array from shape (10,1) into shape (10)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-65-6cbe90a3d4a1>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0marray\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m     \u001b[0marray\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m: could not broadcast input array from shape (10,1) into shape (10)"
     ]
    }
   ],
   "source": [
    "reshape_column(data[\"US GDP\"],(10,1))\n",
    "array = np.array(data)\n",
    "for i in range(data.shape[1]):\n",
    "    array[:,i] = (np.reshape(array[:,i],(10,1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 16)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>US GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14477600000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14718600000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>14418700000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>14964400000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15517900000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>16155300000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>16691500000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>17393100000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>18036600000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>18569100000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           US GDP\n",
       "0  14477600000000\n",
       "1  14718600000000\n",
       "2  14418700000000\n",
       "3  14964400000000\n",
       "4  15517900000000\n",
       "5  16155300000000\n",
       "6  16691500000000\n",
       "7  17393100000000\n",
       "8  18036600000000\n",
       "9  18569100000000"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.loc[:,[\"US GDP\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 1)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([14477600000000, 14718600000000, 14418700000000, 14964400000000,\n",
       "       15517900000000, 16155300000000, 16691500000000, 17393100000000,\n",
       "       18036600000000, 18569100000000], dtype=int64)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[::,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\__main__.py:3: FutureWarning: pd.rolling_corr is deprecated for Series and will be removed in a future version, replace with \n",
      "\tSeries.rolling(window=3).corr(other=<Series>)\n",
      "  app.launch_new_instance()\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x133da8009b0>]"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nJltzCgQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x133d874b0f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "# In this rolling correlation \n",
    "plt.plot(pd.rolling_corr(data[\"US GDP\"], data[\"Total Truck Market Units US/Canada Heavy Duty\"],3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "The L2-norm pops up alot in analysis, "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([[1],[2],[3]])\n",
    "b = np.array([[1],[2],[3]])\n",
    "z = a * b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "L1-norm loss function is also known as least absolute deviations (LAD), least absolute errors (LAE). \n",
    "Essentially minimizing the sum of the absolute differences between the target value and the estimated values.\n",
    "\n",
    "Error function S = sum(abs(yi - f(xi)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "LAD = np.sum(np.abs(a - a*b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LAD"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "L2-norm loss function is also known as least squares error (LSE). Essentially minimizing the sum of the square of the differences S between the target value and the estimated values.\n",
    "\n",
    "s= sum(yi - f(xi))^2\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
